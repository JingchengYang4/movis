from typing import Sequence


def make_ass_file(
    start_times: Sequence[float],
    end_times: Sequence[float],
    characters: Sequence[str],
    texts: Sequence[str],
    dst_ass_path: str,
    font_name: str,
) -> None:
    header = f"""[Script Info]
; Script generated by FFmpeg/Lavc60.14.101
ScriptType: v4.00+
PlayResX: 1920
PlayResY: 1080
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,{font_name},96,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,5,3,2,10,10,30,1
Style: zunda,{font_name},96,&Hffffff,&Hffffff,&H38a65e,&HA0000000,0,0,0,0,100,100,0,0,1,5,3,2,10,10,30,1
Style: metan,{font_name},96,&Hffffff,&Hffffff,&H734aab,&HA0000000,0,0,0,0,100,100,0,0,1,5,3,2,10,10,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
    line_template = "Dialogue: 0,{start_time},{end_time},{character},,0,0,0,,{text}"

    def get_time(t):
        return "{:02d}:{:02d}:{:02d}.{:02d}".format(
            int(t / 3600), int((t / 60) % 60), int(t % 60), int((t % 1) * 100)
        )

    lines = []
    for t0, t1, character, text in zip(start_times, end_times, characters, texts):
        text0, text1 = get_time(t0), get_time(t1)
        lines.append(
            line_template.format(
                start_time=text0, end_time=text1, character=character, text=text
            )
        )
    body = "\n".join(lines)
    with open(dst_ass_path, "w") as fp:
        fp.write(header + body)
